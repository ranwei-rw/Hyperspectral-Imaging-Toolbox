% Syntax:
%     export_slz_(filename, SLZ);
%     export_slz_(filename, SLZ, options);
% 
%  Description:
%       Writes a compressed NICTA HSPipeline file. This is an HDF5 file with all
%       the variables recovered by the HSPipeline routine.
%       Inputs:
%           filename: The name of the file (including the path) to be written to disk
%           SLZ: The data structure delivered by the HSPipeline routine
%           options: Write to disk options these are
%           'compression': Level of compression for the HDF5 data (0-9). The default is 9 (maximum compression).
%           'datatype': Type for the data written to disk on the HDF5 datasets. 
%             The default is 'uint16', but 'uint8' is also allowed. 
%             
% Example:
%      options.compression = 5;
%      options.datatype = 'uint8';
%      export_slz_('test.slz', SLZ, options);
%
%
% This computer code is subject to copyright: (c) National ICT Australia Limited (NICTA) 2013 - 2015 All Rights Reserved.
% Author: Ran Wei & Antonio Robles-Kelly. 
% Version: 1.1.2
% Date: 05 Feb 2015
% Added support to polygon labels generated by Scyven
%
% Version: 1.1.1
% Date: 18 Sep 2014

function export_slz_(filename, SLZ, options)

    if ~exist('options', 'var') || ~isfield(options, 'compression') || options.compression > 9 || options.compression < 1
        %This is the default, i.e. max compression
        options.compression = 9;
    end
    
    if ~isfield(options, 'datatype') || (~strcmpi(options.datatype, 'uint8') && ~strcmpi(options.datatype, 'uint16'))
        options.datatype = 'uint16';       %Encode the materials using double measurments
    end
    %Assure the range is correct
    %SLZ.Endmember = SLZ.Endmember/max(max(SLZ.Endmember));

    if isequal('\', filesep)
        % most systems use \ as separator
        [~, pos] = strtok(filename, '/');
        if ~isempty(pos)
            filename = strrep(filename, '/', filesep);
        end
    else
        [~, pos] = strtok(filename, '\');
        if ~isempty(pos)
            filename = strrep(filename, '\', filesep);
        end
    end
    
    %Create a file with standard options
    fileid = H5F.create(filename, 'H5F_ACC_TRUNC', 'H5P_DEFAULT', 'H5P_DEFAULT');
    H5F.close(fileid);
    
    names = fieldnames(SLZ);
    
    %Start with all the numeric values (data)
    for i = 1:length(names)
        if isstruct(SLZ.(names{i}))
            subnames = fieldnames(SLZ.(names{i}));
            for j=1:length(subnames)
                if isnumeric(SLZ.(names{i}).(subnames{j})) && ~strcmpi(subnames{j}, 'GI')
                    %Create the dataset
                    n = ndims(SLZ.(names{i}).(subnames{j}));    %Find the number of dimensions for the array
                    maxv = max(SLZ.(names{i}).(subnames{j}));      %Go on to find the scaling factors
                    minv = min(SLZ.(names{i}).(subnames{j}));
                    
                    for k = 2:n
                        maxv = max(maxv);
                        minv = min(minv);
                    end
                    %Do the actual write-to-disk operation
                    if strcmpi(options.datatype, 'uint8')
                        if ~isempty(strfind(subnames{j}, 'Indexes')) || (maxv-minv)==0
                            if floor(SLZ.(names{i}).(subnames{j})) > (2^8-1)
                                t = uint8(floor(SLZ.(names{i}).(subnames{j})));
                                h5create(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'DATA'), ...
                                         size(t), 'Datatype', 'uint16', 'ChunkSize', size(t), 'Deflate', options.compression);
                            else
                                t = uint8(floor(SLZ.(names{i}).(subnames{j})));
                                h5create(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'DATA'), ...
                                         size(t), 'Datatype', 'uint8', 'ChunkSize', size(t), 'Deflate', options.compression);
                            end
                        else
                            t = uint8(floor(double(SLZ.(names{i}).(subnames{j})-minv)*(2^8-1)/double(maxv-minv)));
                            h5create(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'DATA'), ...
                                     size(t), 'Datatype', 'uint8', 'ChunkSize', size(t), 'Deflate', options.compression);
                        end
                    end
                    if strcmpi(options.datatype, 'uint16')
                        if ~isempty(strfind(subnames{j}, 'Indexes')) || (maxv-minv)==0
                            t = uint16(floor(SLZ.(names{i}).(subnames{j})));
                        else
                            t = uint16(floor(double(SLZ.(names{i}).(subnames{j})-minv)*(2^16-1)/double(maxv-minv)));
                        end
                        h5create(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'DATA'), ...
                                 size(t), 'Datatype', 'uint16', 'ChunkSize', size(t), 'Deflate', options.compression);
                    end
                    %Write it to the file
                    h5write(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'DATA'), t);
                    %Write the scaling of the data
                    h5create(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'MAX'), ...
                             size(maxv), 'Datatype', 'double', 'ChunkSize', size(maxv), 'Deflate', options.compression);
                    h5write(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'MAX'), maxv);
                    h5create(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'MIN'), ...
                             size(minv), 'Datatype', 'double', 'ChunkSize', size(minv), 'Deflate', options.compression);
                    h5write(filename, strcat('/', names{i}, '/', subnames{j}, '/', 'MIN'), minv);    
                end
            end
        else
            if ismatrix(SLZ.(names{i}))
                if ischar(SLZ.(names{i})) && isfield(SLZ,'Labels')
                    file_id = H5F.open(filename, 'H5F_ACC_RDWR', 'H5P_DEFAULT');
                    memtype = H5T.copy('H5T_C_S1');
                    H5T.set_size(memtype, 'H5T_VARIABLE');
                    space_id = H5S.create_simple(1, size(SLZ.Labels, 1), []);
                    H5G.create(file_id,'/Labels', 'H5P_DEFAULT', 'H5P_DEFAULT', 'H5P_DEFAULT');
                    dset = H5D.create(file_id, '/Labels/DATA', memtype, space_id, 'H5P_DEFAULT');
                    H5D.write (dset, memtype, 'H5S_ALL', 'H5S_ALL', 'H5P_DEFAULT', cellstr(SLZ.Labels));
                    H5D.close(dset)
                    H5S.close(space_id)
                    H5F.close(file_id);
                end
                if isnumeric(SLZ.(names{i}))
                    %Create the dataset
                    n = ndims(SLZ.(names{i}));    %Find the number of dimensions for the array
                    maxv = max(SLZ.(names{i}));      %Go on to find the scaling factors
                    minv = min(SLZ.(names{i}));
                    for k=2:n
                        maxv = max(maxv);
                        minv = min(minv);
                    end                   
                    %Do the actual write-to-disk operation
                    if strcmpi(options.datatype, 'uint8')
                        t = uint8(floor((SLZ.Endmembers-minv)/(maxv-minv)*(2^8-1)));
                        h5create(filename, strcat('/', names{i}, '/', 'DATA'), ...
                                 size(t), 'Datatype', 'uint16', 'ChunkSize', size(t), 'Deflate', options.compression);
                    else
                        t = uint16(floor((SLZ.(names{i})-minv)/(maxv-minv)*(2^16-1)));
                        h5create(filename, strcat('/', names{i}, '/', 'DATA'), ...
                             size(t), 'Datatype', 'uint16', 'ChunkSize', size(t), 'Deflate', options.compression);
                    end
                    %Write it to the file
                    h5write(filename, strcat('/', names{i}, '/', 'DATA'), t);
                    %Write the scaling of the data
                    h5create(filename, strcat('/', names{i}, '/', 'MAX'), ...
                             size(maxv), 'Datatype', 'double', 'ChunkSize', size(maxv), 'Deflate', options.compression);
                    h5write(filename, strcat('/', names{i}, '/', 'MAX'), maxv);
                    h5create(filename, strcat('/', names{i}, '/', 'MIN'), ...
                             size(minv), 'Datatype', 'double', 'ChunkSize', size(minv), 'Deflate', options.compression);
                    h5write(filename, strcat('/', names{i}, '/', 'MIN'), minv);
                end
            end
            
        end
    end
    %Do the header strings (attributes)
    if isfield(SLZ,'HDR')
        subnames = fieldnames(SLZ.HDR);
        for j = 1:length(subnames)
            if ~isnumeric(SLZ.HDR.(subnames{j}))
                t = SLZ.HDR.(subnames{j});
                h5create(filename, strcat('/HDR/', subnames{j}), ...
                      size(t));
                h5writeatt(filename, strcat('/HDR/', subnames{j}), subnames{j}, t);
            else
            %   for Generator Indicator,  0 means C++ and 1 means MATLAB
                if strcmpi(subnames{j},  'GI')
                    h5writeatt(filename, '/HDR', 'GI',  SLZ.HDR.(subnames{j}));
                end
            end
        end
    end

%   end of function export_slz_.m

end