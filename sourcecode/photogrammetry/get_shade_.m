%% function SHADE = get_shade(I, data, smooth_edge, weights)
%
%% Syntax:
%   SHADE = get_shade(I, data, smooth_edge, weights) or
%   SHADE = get_shade(I, data, smooth_edge)
%
%% Description:
%   generate shapes of objects using given data and weight information.   
% 
%% Input:
%   I:           input image
%   data:        Structure of input image. Can be generated by calling shape_from_shading function. It contains the
%                following fields
%                    data.A
%                    data.Dw
%                    data.sI
%                    data.MASK
%
%   smooth_edge: whether to smooth the edge of shape. 1 is to smooth and 0 is not. By default, it is 1.
%   weights:     weights information of image. Its default values are 
%                    weights.BL    = 10;
%                    weights.Shade = 0;
%                    weights.Prec  = 0;
%                    weights.sm    = 10;
%                    weights.maxit = 2000;
%    
%% Output:
%   SHADE:   result of shade estimated.
% 
%% 
% This computer code is subject to copyright: (c) National ICT Australia Limited (NICTA) 2014 All Rights Reserved.
% Author: Ran Wei and Lin Gu
% Version: 0.1.1
% Last Update Date: 13 Aug 2014

function SHADE = get_shade_(I, data, smooth_edge, weights)

    if ~exist('weights', 'var') 
        weights.BL    = 10;
        weights.Shade = 0;
        weights.Prec  = 0;
        weights.sm    = 10;
        weights.maxit = 2000;
    end

    if ~exist('smooth_edge', 'var') 
        smooth_edge = 1;
    end

    if nargin < 2
        error('Please check input arguments');
    end

    [height_ width_ bands_] = size(I);

    frame_size_ = height_ * width_;

    Dw_ = data.Dw;
    A_  = data.A;
    
    M_ = (Dw_ - A_) + spdiags(ones(frame_size_, 1), 0, frame_size_, frame_size_) * weights.BL;

    if weights.Prec
        [L_, U_] = ilu(M_, struct('type', 'ilutp', 'droptol', 1e-3));
        SHADE = bicg(M_, double(data.MASK(:)) * weights.BL, [], weights.maxit, L_, U_);
    else
        SHADE = bicg(M_, double(data.MASK(:)) * weights.BL, [], weights.maxit);
    end

    SHADE = reshape(SHADE, height_, width_);

    if smooth_edge

        mean_I_ = mean(I, 3);
        mean_I_(mean_I_ < 0.1) = 1;
        I_normalised_ = I ./ repmat(mean_I_, [1 1 bands_]);
        edge_map_     = bwmorph(edge(I_normalised_(:, :, 1), 'sobel'), 'dilate');        
        SHADE         = imfilter(SHADE, fspecial('average', [5 5])) .*  edge_map_ + SHADE .* (~edge_map_);

    end

%   end of function get_shade_
end
    
    
    
    
